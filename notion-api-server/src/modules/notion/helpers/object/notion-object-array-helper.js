import { NotionIdHelper as ids } from '../id/notion-id-helper.js'

export class NotionJsonArrayHelper {
  static getFirstBlockId (array) {
    const id = array?.[0]?.id ?? ''
    return id
  }

  static getBackPageId (pageId, friends, parents) {
    const me = this
    let isParent = false
    pageId = ids.cleanId(pageId)
    //console.log('üí• getBackBlockId: ', pageId)
    //console.log('üí• parents: ', parents)
    //console.log('üí• friends: ', friends)
    // T√¨m v·ªã tr√≠ c·ªßa pageId trong danh s√°ch b·∫°n b√® (friends)
    const index = friends.findIndex(f => ids.cleanId(f.id) === pageId)
    let rs = null
    if (index !== -1) {
      // N·∫øu t√¨m th·∫•y v√† c√≥ ph·∫ßn t·ª≠ tr∆∞·ªõc ƒë√≥
      if (index > 0) {
        rs = friends[index - 1].id
      } else {
        // N·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ tr∆∞·ªõc ƒë√≥, tr·∫£ v·ªÅ id ƒë·∫ßu ti√™n trong parents (n·∫øu c√≥)
        rs = me.getFirstBlockId(parents)
        isParent = true
        //rs = null
      }
    }
    if (rs) rs = ids.cleanId(rs)
    //console.log('üí• getBackBlockId rs: ', rs)

    // N·∫øu pageId kh√¥ng c√≥ trong friends
    return {id : rs, isParent: isParent}
  }

  static getNextPageId (pageId, friends, parents) {
    const me = this
    let rs = null
    let isParent = false
    pageId = ids.cleanId(pageId)
    const index = friends.findIndex(f => ids.cleanId(f.id) === pageId)
    if (index === -1 || index === friends.length - 1) {
      rs = me.getFirstBlockId(parents)
      isParent = true
    } else {
      rs = friends[index + 1]?.id || null
    }
    if (rs) rs = ids.cleanId(rs)
    //console.log('üí• getNextPageId rs: ', rs)
    return {id : rs, isParent: isParent}
  }

  static getFirstChildPageId (children) {
    const me = this
    let rs = me.getFirstBlockId(children)
    if (rs) rs = ids.cleanId(rs)
    //console.log('üí• getFirstChildPageId rs: ', rs)
    return rs
  }

  static getEndNavBlockId (pageBlocks, textComparer) {
    if (!pageBlocks.length) return null
    let foundBlock = pageBlocks?.find(
      block => block.type == 'toggle' && textComparer.isMatchContent(block)
    )
    if(!foundBlock) {
      foundBlock = pageBlocks[pageBlocks.length - 1]
    }
    const rs = foundBlock?.id

   //console.log('‚≠êÔ∏è getEndNavBlockId: ', rs)
    return rs
  }
}
