import { EcoNotionBuilderDataText as Base } from '../base/builder-data-text.js'
import { EcoTextUtil as uTxt } from '../../../../utils/text.js'

// import { NotionJsonArrayHelper } from '../../helpers/object/notion-object-array-helper.js'
// import { EcoNotionTemplateLv1 } from '../../templates/notion-template-lv1.js'
// import { EcoTaskUrl as eUrl } from '../../../eco/tasks/eco-task-url.js'
// import { NotionUrlHelper as nUrl } from '../../helpers/id/notion-url-helper.js'
// import { NotionIdHelper as nId } from '../../helpers/id/notion-id-helper.js'
// L·ªõp n√†y ch·ªãu tr√°ch nhi√™m t·∫°o d·ªØ li·ªáu cho d√≤ng text nav1 lv1
export class EcoNotionParagraphLv1RawItemsBuilder extends Base {
  _pageId
  _block
  _emoji1
  _emoji2
  constructor (
    logCfg = {
      isDebug: false,
      name: 'EcoNotionParagraphLv1RawItemsBuilder',
      level: 'info',
    }
  ) {
    super(logCfg)
  }
  setBeginEmoji (emj) {
    this._emoji1 = emj
    this._emoji2 = emj
  }
  setPageId (pageId) {
    const me = this
    me._pageId = pageId
    return me
  }
  setPageInfo (pageInfo) {
    const me = this
    me._pageInfo = pageInfo
    return me
  }
  setBlock (block) {
    const me = this
    me._block = block
    return me
  }
  setEmoji (emoji) {
    const me = this
    //me._emoji1 = me._emoji2
    me._emoji2 = emoji
    //console.log('----- setEmoji -----')
    //console.log(me._emoji1)
    //console.log(me._emoji2)
    return me
  }

  #addFluteToSentences (content) {
    const sentences = content.match(/[^.!?]+[.!?]?/g) || []

    const isOnlyEmoji = text => {
      // Xo√° kho·∫£ng tr·∫Øng r·ªìi ki·ªÉm tra to√†n b·ªô l√† emoji
      const noSpace = text.trim().replace(/\s/g, '')
      return noSpace.length > 0 && /^[\p{Emoji}]+$/u.test(noSpace)
    }

    const processed = sentences.map((sentence, index) => {
      const trimmed = sentence.trim()

      // N·∫øu l√† c√¢u cu·ªëi v√† ch·ªâ c√≥ emoji => gi·ªØ nguy√™n, kh√¥ng th√™m ü™à
      if (index === sentences.length - 1 && isOnlyEmoji(trimmed)) {
        return trimmed
      }

      // N·∫øu ƒë√£ c√≥ ü™à ·ªü ƒë·∫ßu th√¨ gi·ªØ nguy√™n
      if (trimmed.startsWith('ü™à')) {
        return trimmed
      }

      return 'ü™à ' + trimmed
    })

    return processed.join(' ')
  }

  #isLink (str) {
    return /^(https?:\/\/)?([\w-]+\.)+[\w-]{2,}(\/\S*)?$/.test(str)
  }

  #getRawText (text) {
    return text ? uTxt.getRawText(text) : text
  }

  #getFinalText (content, emj1, emj2, newRt, status) {
    const me = this
    //console.log('üè° newRt', newRt)
    //console.log('üè° _pageInfo', me._pageInfo?.properties?.title?.title)
    const c = newRt?.text?.content?.trim()
    if (status.isHome) {
      if (c === 'üè°') status.isHome = true
    } else if (me.#isLink(c) && c === newRt?.text?.link?.url?.trim()) {
      const ta = me._pageInfo?.properties?.title?.title
      content = ta?.length
        ? me.#getRawText(ta[0]?.plain_text ?? content)
        : content
    }
    //console.log(emj1)
    //console.log(emj2)
    //content = this.#addFluteToSentences(content)
    //const trimmedEmj2 = emj2.trim()
    let rs = content?.replace(
      new RegExp(emj1, 'g'),
      (match, offset, string) => {
        // L·∫•y ph·∫ßn sau emj1
        const after = string.slice(offset + match.length)
        // Ki·ªÉm tra n·∫øu ph·∫ßn sau ch·ªâ to√†n kho·∫£ng tr·∫Øng r·ªìi ƒë·∫øn d·∫•u c√¢u ho·∫∑c h·∫øt chu·ªói
        if (/^\s*([.!?]|$)/.test(after)) {
          return emj2
        }
        return match // kh√¥ng thay
      }
    )
    rs = rs ?? ''
    console.log(' üè† --- getFinalText ---', rs)
    if (rs.endsWith(' ' + emj2)) {
      // ƒê√∫ng ƒë·ªãnh d·∫°ng r·ªìi, kh√¥ng l√†m g√¨ c·∫£
    } else if (rs.endsWith(emj2)) {
      // C√≥ emoji nh∆∞ng thi·∫øu kho·∫£ng tr·∫Øng tr∆∞·ªõc ‚Üí s·ª≠a l·∫°i
      rs = rs.slice(0, -emj2.length) + ' ' + emj2
    } else {
      // Kh√¥ng c√≥ emoji ‚Üí th√™m v√†o
      rs += ' ' + emj2
    }
    //return this.#addFluteToSentences(rs)
    return rs
  }

  #replaceFireWithWing (richTextArray) {
    const me = this
    const emj1 = me._emoji1
    const emj2 = me._emoji2
    const status = {}
    return richTextArray.map(rt => {
      // Sao ch√©p object g·ªëc ƒë·ªÉ gi·ªØ nguy√™n annotations v√† c√°c thu·ªôc t√≠nh kh√°c
      const newRt = { ...rt }

      // N·∫øu l√† lo·∫°i c√≥ text.content th√¨ thay trong ƒë√≥
      if (newRt.type === 'text' && newRt.text?.content) {
        newRt.text = {
          ...newRt.text,
          content: me.#getFinalText(
            newRt.text.content,
            emj1,
            emj2,
            newRt,
            status
          ),
        }
      }

      if (newRt?.text?.link?.url?.trim()) {
        newRt.annotations = {
          bold: false,
          italic: false,
          strikethrough: false,
          underline: true,
          code: false,
          color: 'blue',
        }
      }

      // ƒê·ªìng th·ªùi s·ª≠a plain_text n·∫øu c·∫ßn (plain_text t·ª± sinh, nh∆∞ng c√≥ th·ªÉ b·∫°n c·∫ßn ƒë·ªìng b·ªô)
      if (newRt.plain_text) {
        newRt.plain_text = me.#getFinalText(
          newRt.plain_text,
          emj1,
          emj2,
          newRt,
          status
        )
      }
      //me._emoji1 =  me._emoji2
      return newRt
    })
  }

  getRichTextData () {
    const me = this
    const block = me._block
    //console.log()
    const richText = me.#replaceFireWithWing(block[block.type].rich_text)
    return richText
  }
}
